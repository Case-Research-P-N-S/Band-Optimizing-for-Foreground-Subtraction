def plotScatter(xAxis, *args, **kwargs):
    fig = plt.figure()
    needlegend = False
    for index, elem in enumerate(args):
        ax = plt.subplot(2, 1, index)
        name = 'plot{}'.format(index)
        if len(elem) == 1:
            name, = ax.plot(xAxis, elem[0])
        elif len(elem) == 2:
            if type(elem[1]) is str:
                name, = ax.plot(xAxis, elem[0], label='{}'.format(elem[1]))
                needlegend = True
            else:
                name, = ax.plot(xAxis, elem[0])
        else:
            if len(elem[-1]) > 1: 
                fitCoeff, select = elem[-1], elem[:-1]
            else: 
                fitCoeff, select = ([1]*len(elem)), elem
            for subindex, subelem in enumerate(select):
                name = 'plot{}{}'.format(index,subindex)
                if len(subelem) == 1:
                    name, = ax.plot(xAxis, [x*fitCoeff for x in subelem])
                if len(subelem) == 2:
                    if type(subelem[1]) is str:
                        name, = ax.plot(xAxis, [x*fitCoeff for x in subelem[0]], label='{}'.format(subelem[1]))
                        needlegend = True
                    else:
                        name, = ax.plot(xAxis, [x*fitCoeff for x in subelem])
                ax.plot(xAxis,[x*fitCoeff for x in subelem])

    if "title" in kwargs: plt.title(kwargs.get("title"))
    if "xlabel" in kwargs: plt.xlabel(kwargs.get("title"))
    if needlegend == True:
        handles, labels = ax.get_legend_handles_labels()
        plt.legend(handles, labels, loc='upper right')
    if "name" in kwargs: plt.savefig(kwargs.get("title"))
    else: plt.savefig("lineplots.png")
    plt.close(fig)

def plotScatter(xAxis, Measured, BMode, Dust, fitCoeff, bestFit, Theory):
    # Makes a scatter plot
    fig = plt.figure()
    ax1 = plt.subplot(2, 1, 1)
    measured, = ax1.plot(xAxis, [y for y in Measured], label='Measured')
    Fit, = ax1.plot(xAxis, bestFit, label='Best Fit')
    plt.title("Measured and Best Fit Function")
    handles, labels = ax1.get_legend_handles_labels()
    plt.legend(handles, labels, loc='upper right')

    ax2 = plt.subplot(2, 1, 2)
    bmode, = ax2.plot(xAxis, [B*fitCoeff[1] for B in BMode], 'g', label='BMode')
    dust, = ax2.plot(xAxis, [D*fitCoeff[0] for D in Dust], 'r', label='Dust')
    bestfit, = ax2.plot(xAxis, bestFit, 'k', label='Best Fit')
    theory, = ax2.plot(xAxis, Theory, 'b', label='Theory')
    plt.title(fitCoeff)
    handles, labels = ax1.get_legend_handles_labels()
    plt.legend(handles, labels, loc='upper right')

    plt.savefig("lineplots.png")
    plt.close(fig)
